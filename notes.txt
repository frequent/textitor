=> progress

> rewrite storage to use latest renderjs/jio with worker + cache storage
> fix folder operations breaking promise chains then remove additonal error handlers
> allow to createJIO inside project = support storages, find place to add params
- wrap all shortcuts in a single promise (proper queue call) with global error handler to fix propagation
- try base activity queue on loopEventListener with custom callback (as is), as this will
  listen permantenly and should allow to trigger subsequent calls without
  having to cancel the previous promise still pending
- replace jshint with jslint
- create git init/fork or clone repo, which all create a repository. The git storage
  should test for required fields to initiliaze like github usernamen and password
  and raise an error for each missing one, then catch errors and build a form 
  based on missing fields and method to call with providing them.
- implement lazy loading of dependencies using defers which can add stuff 
  when required, pass deferred in gadget returned on ready.

=> maintain self
- try image handling with favicon, must be possible to handle images without opening
- try trailing syntax correction based on jslint/csslint for obvious cases
- try method source links, clicking on a method opens file it is contained

=> test/preview/deploy
- run tests textitor/test/, preview like gh-pages on textitor/preview/, and "build" on textitor/deploy/

=> speak
- add voice commands, try on mobile instead of using shortcuts
- untangle emscriptem file, remove recognizer if not needed
- would be nice to implement in Javascript and be able to add samples on the fly, retrain, rebuild, done
  so one could generate their own trained model step by step.
- juliusjs, find out how to build grammar with emscriptem online
- add voice find/grep and replace


=> gitstorage
  - replicate with indexeddb and remote gitstorage
  - createJIO = gitinit => create new repo, this method is to update git config
  - calling createJIO will only update existing git folder if there is one
  - parameters:
    * fork - url => else create empty git
    * upstream - where to send stuff, else local, must be reinitialized
    * user
    * pass
  - documents are branches, attachments are files? but caches are already files
  - post-document = create new branch
  - remove-document = delete branch
  - get-document = checkout branch
  - put - edit branch?
  - putAttachment = commit file
  - getAttachment = ?
  - removeAttachment = ?
  - repair/sync = push

=> cachestorage
  - commit will do a diff with local gitstorage, allow to init?
  - can add everything to gitstorage. push will send to master

=> github API

var github = new Github({
  username: "frequent",
  password: "",
  auth: "basic"
});
serverless = github.getRepo("frequent", "nexedi-serverless-test")
serverless.getTree("master", function (err, tree) {if (err) {console.log("error");console.log(err);} else {console.log(tree);}});

  - branches? files?
  - jio per branch? document = branch?
  - if document per branch, files are attachments, editing and saving updates attachments
  - of a diff is a new attachment?
